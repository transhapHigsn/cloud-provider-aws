// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/ecr-credential-provider/main.go

// Package mocks is a generated GoMock package.
package mocks

import (
	ecr "github.com/aws/aws-sdk-go/service/ecr"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockECR is a mock of ECR interface
type MockECR struct {
	ctrl     *gomock.Controller
	recorder *MockECRMockRecorder
}

// MockECRMockRecorder is the mock recorder for MockECR
type MockECRMockRecorder struct {
	mock *MockECR
}

// NewMockECR creates a new mock instance
func NewMockECR(ctrl *gomock.Controller) *MockECR {
	mock := &MockECR{ctrl: ctrl}
	mock.recorder = &MockECRMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockECR) EXPECT() *MockECRMockRecorder {
	return m.recorder
}

// GetAuthorizationToken mocks base method
func (m *MockECR) GetAuthorizationToken(input *ecr.GetAuthorizationTokenInput) (*ecr.GetAuthorizationTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorizationToken", input)
	ret0, _ := ret[0].(*ecr.GetAuthorizationTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorizationToken indicates an expected call of GetAuthorizationToken
func (mr *MockECRMockRecorder) GetAuthorizationToken(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorizationToken", reflect.TypeOf((*MockECR)(nil).GetAuthorizationToken), input)
}
